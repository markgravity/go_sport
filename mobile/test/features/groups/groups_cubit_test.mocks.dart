// Mocks generated by Mockito 5.4.5 from annotations
// in go_sport_app/test/features/groups/groups_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:go_sport_app/features/groups/models/group.dart' as _i3;
import 'package:go_sport_app/features/groups/models/sport.dart' as _i2;
import 'package:go_sport_app/features/groups/services/groups_service.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSport_0 extends _i1.SmartFake implements _i2.Sport {
  _FakeSport_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSportDefaults_1 extends _i1.SmartFake implements _i2.SportDefaults {
  _FakeSportDefaults_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroup_2 extends _i1.SmartFake implements _i3.Group {
  _FakeGroup_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroupsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupsService extends _i1.Mock implements _i4.GroupsService {
  MockGroupsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Sport>> getAvailableSports() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableSports,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Sport>>.value(<_i2.Sport>[]),
      ) as _i5.Future<List<_i2.Sport>>);

  @override
  _i5.Future<_i2.Sport> getSportDetails(String? sportType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportDetails,
          [sportType],
        ),
        returnValue: _i5.Future<_i2.Sport>.value(_FakeSport_0(
          this,
          Invocation.method(
            #getSportDetails,
            [sportType],
          ),
        )),
      ) as _i5.Future<_i2.Sport>);

  @override
  _i5.Future<_i2.SportDefaults> getSportDefaults(String? sportType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSportDefaults,
          [sportType],
        ),
        returnValue: _i5.Future<_i2.SportDefaults>.value(_FakeSportDefaults_1(
          this,
          Invocation.method(
            #getSportDefaults,
            [sportType],
          ),
        )),
      ) as _i5.Future<_i2.SportDefaults>);

  @override
  _i5.Future<List<String>> getLocationSuggestions(
    String? sportType, {
    String? city,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationSuggestions,
          [sportType],
          {#city: city},
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<String>> getNameSuggestions(
    String? sportType, {
    String? city,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNameSuggestions,
          [sportType],
          {#city: city},
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i3.Group>> getGroups({
    String? sportType,
    String? city,
    String? privacy,
    String? search,
    int? page = 1,
    int? perPage = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [],
          {
            #sportType: sportType,
            #city: city,
            #privacy: privacy,
            #search: search,
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i5.Future<List<_i3.Group>>.value(<_i3.Group>[]),
      ) as _i5.Future<List<_i3.Group>>);

  @override
  _i5.Future<_i3.Group> createGroup({
    required String? name,
    String? description,
    required String? sportType,
    required String? skillLevel,
    required String? location,
    required String? city,
    String? district,
    double? latitude,
    double? longitude,
    Map<String, dynamic>? schedule,
    int? maxMembers,
    double? membershipFee,
    required String? privacy,
    String? avatar,
    Map<String, dynamic>? rules,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [],
          {
            #name: name,
            #description: description,
            #sportType: sportType,
            #skillLevel: skillLevel,
            #location: location,
            #city: city,
            #district: district,
            #latitude: latitude,
            #longitude: longitude,
            #schedule: schedule,
            #maxMembers: maxMembers,
            #membershipFee: membershipFee,
            #privacy: privacy,
            #avatar: avatar,
            #rules: rules,
          },
        ),
        returnValue: _i5.Future<_i3.Group>.value(_FakeGroup_2(
          this,
          Invocation.method(
            #createGroup,
            [],
            {
              #name: name,
              #description: description,
              #sportType: sportType,
              #skillLevel: skillLevel,
              #location: location,
              #city: city,
              #district: district,
              #latitude: latitude,
              #longitude: longitude,
              #schedule: schedule,
              #maxMembers: maxMembers,
              #membershipFee: membershipFee,
              #privacy: privacy,
              #avatar: avatar,
              #rules: rules,
            },
          ),
        )),
      ) as _i5.Future<_i3.Group>);

  @override
  _i5.Future<_i3.Group> getGroup(int? groupId) => (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [groupId],
        ),
        returnValue: _i5.Future<_i3.Group>.value(_FakeGroup_2(
          this,
          Invocation.method(
            #getGroup,
            [groupId],
          ),
        )),
      ) as _i5.Future<_i3.Group>);

  @override
  _i5.Future<_i3.Group> updateGroup(
    int? groupId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [
            groupId,
            updates,
          ],
        ),
        returnValue: _i5.Future<_i3.Group>.value(_FakeGroup_2(
          this,
          Invocation.method(
            #updateGroup,
            [
              groupId,
              updates,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Group>);

  @override
  _i5.Future<void> deleteGroup(int? groupId) => (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [groupId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> joinGroup(
    int? groupId, {
    String? joinReason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinGroup,
          [groupId],
          {#joinReason: joinReason},
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<void> leaveGroup(int? groupId) => (super.noSuchMethod(
        Invocation.method(
          #leaveGroup,
          [groupId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.User>> getGroupMembers(int? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupMembers,
          [groupId],
        ),
        returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i5.Future<List<_i3.User>>);

  @override
  _i5.Future<_i3.Group> getGroupDetails(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #getGroupDetails,
          [groupId],
        ),
        returnValue: _i5.Future<_i3.Group>.value(_FakeGroup_2(
          this,
          Invocation.method(
            #getGroupDetails,
            [groupId],
          ),
        )),
      ) as _i5.Future<_i3.Group>);

  @override
  _i5.Future<bool> removeMemberFromGroup({
    required String? groupId,
    required String? memberId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMemberFromGroup,
          [],
          {
            #groupId: groupId,
            #memberId: memberId,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<String> generateInvitationLink(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateInvitationLink,
          [groupId],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #generateInvitationLink,
            [groupId],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> updateGroupSettings({
    required String? groupId,
    String? name,
    String? description,
    bool? isPrivate,
    String? location,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroupSettings,
          [],
          {
            #groupId: groupId,
            #name: name,
            #description: description,
            #isPrivate: isPrivate,
            #location: location,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
